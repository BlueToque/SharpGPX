using SharpGPX;
using SharpGPX.GPX1_1;
using System;
using System.Collections.Generic;

namespace Utility
{
    public static class Examples
    {
        public static GpxClass CreateTrack()
        {
            GpxClass track = new GpxClass()
            {
                Metadata = new metadataType()
                {
                    author = new personType("Michael Coyle", "Michael.Coyle@BlueToque.ca"),
                    link = new linkTypeCollection().AddLink(new linkType("www.BlueToque.ca", "Blue Toque Software")),
                    name = "Test Track",
                    desc = "Test track generated by SharpGPX",
                    copyright = new copyrightType("Blue Toque Software", "2020"),

                },
            };

            track.Tracks.Add(new trkType()
            {
                name = "11-AUG-11 18:18:27",
                trkseg = new trksegTypeCollection().AddItem(
                    new trksegType()
                    {
                        trkpt = new wptTypeCollection()
                            .AddItem(new wptType(49.706482, -123.111961, 38.11))
                            .AddItem(new wptType(49.706417, -123.112190, 38.11))
                            .AddItem(new wptType(49.706348, -123.112495, 76.08))
                            .AddItem(new wptType(49.706242, -123.111961, 74.16))
                            .AddItem(new wptType(49.705872, -123.111961, 38.11))
                    })
            });

            track.Metadata.bounds = track.GetBounds();
            return track;
        }

        public static GpxClass CreateTrackNoMetadata()
        {
            GpxClass track = new GpxClass();

            track.Tracks.Add(new trkType()
            {
                name = "11-AUG-11 18:18:27",
                trkseg = new trksegTypeCollection().AddItem(
                    new trksegType()
                    {
                        trkpt = new wptTypeCollection()
                            .AddItem(new wptType(49.706482, -123.111961, 38.11))
                            .AddItem(new wptType(49.706417, -123.112190, 38.11))
                            .AddItem(new wptType(49.706348, -123.112495, 76.08))
                            .AddItem(new wptType(49.706242, -123.111961, 74.16))
                            .AddItem(new wptType(49.705872, -123.111961, 38.11))
                    })
            });

            track.Metadata.bounds = track.GetBounds();
            return track;
        }

        /// <summary>
        /// Read the GPX from the source file, take each route and 
        /// store it in a new GPX class
        /// </summary>
        /// <param name="sourceFileName"></param>
        /// <returns></returns>
        public static List<GpxClass> CopyGpxFile(string sourceFileName)
        {
            List<GpxClass> result = new List<GpxClass>();

            var source = GpxClass.FromFile(sourceFileName);

            foreach (var track in source.Tracks)
            {
                var newGPX = new GpxClass()
                {
                    Metadata = new metadataType()
                    {
                        name = track.name,
                        desc = track.desc,
                    },
                };

                var routes = track.ToRoutes();
                newGPX.Routes.AddRange(routes);

                var _ = newGPX.ToXml();

                result.Add(newGPX);
            }

            return result;
        }

        public static GpxClass ConvertToRoutes(string sourceFileName)
        {
            var src = GpxClass.FromFile(sourceFileName);

            var dst = new GpxClass()
            {
                Creator = src.Creator,
                Extensions = new extensionsType(src.Extensions),
                Metadata = new metadataType(src.Metadata),
            };

            foreach (var track in src.Tracks)
                dst.Routes.AddRange(track.ToRoutes());

            return dst;
        }

        public static void ReadAndPrint(string fileName)
        {
            Console.WriteLine("File Name: {0}", fileName);
            GpxClass gpx = GpxClass.FromFile(fileName);

            Console.WriteLine("{0} elements total", gpx.CountElements());

            Console.WriteLine("Waypoints: {0}", gpx.Waypoints.Count);
            gpx.Waypoints.ForEach(x => x.Print());
            
            Console.WriteLine("Routes: {0}", gpx.Routes.Count);
            gpx.Routes.ForEach(x => x.Print());
            
            Console.WriteLine("Tracks: {0}", gpx.Tracks.Count);
            gpx.Tracks.ForEach(x => x.Print());
        }

        public static void Print(this wptType wpt)
        {
            Console.WriteLine("\tWaypoint: {0}", wpt.name);
        }

        public static void Print(this trkType trk)
        {
            Console.WriteLine("\tTrack: {0}, {1} segments", trk.name, trk.trkseg.Count);

            var garminExt = trk.GetGarminTrackExt();
            if (garminExt != null)
                Console.WriteLine("Track {0} has Garmin extension", trk.name);
            var color = garminExt?.Color;
            var lineExt = trk.GetTopografixLine();
            if (lineExt != null) Console.WriteLine("Track {0} has Topografix extension", trk.name);
        }

        public static void Print(this trksegType trkSeg)
        {
            Console.WriteLine("\tSegment: {0} points", trkSeg.trkpt.Count);
        }

        public static void Print(this rteType rte)
        {
            Console.WriteLine("\tRoute: {0}, {1} points", rte.name, rte.rtept.Count);

            var garminExt = rte.GetGarminRouteExt();
            if (garminExt != null)
                Console.WriteLine("Route {0} has Garmin extension", rte.name);
            var color = garminExt?.Color;

            int i = 0;

            foreach (var point in rte.rtept)
            {
                var rtePteExt = point.GetGarminRoutePointExt();
                if (rtePteExt != null)
                    Console.WriteLine("Route {0} point {1} has Garmin extension", rte.name, i);
                i++;
            }
        }
    }
}